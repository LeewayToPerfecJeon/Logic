package cpt;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

//apparently we can't make the AI perfect sooooo
public class CPT {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    public static void main(String[] args) throws IOException {
        

        System.out.println("Minus Auction");
        createNumbers();

    }

    public static void createNumbers() {
        ArrayList<Integer> numbers = new ArrayList<Integer>();
        for (int i = -1; i > -21; i--) {
            numbers.add(i);
        }
    }

    //only need this method for the player b/c it's already initialized for the AI
    public static int initializeChips() {
        //we can always change this number
        return 7;

    }

     
    public static int getNumber(ArrayList<Integer> x) {
        int upperbound = (x.size()-1);
        int lowerbound = 0;
        int index = (int)(Math.random() * ((upperbound - lowerbound) + 1) + lowerbound);
        int number = x.get(index);
        //remove removes the number and the numbers after that all move one spot to the left right
        x.remove(index);
        return number;
        
    }
    
   
    public static int pickHiddenCube(ArrayList<Integer>x){
        int upperbound = (x.size()-1);
        int lowerbound = 0;
        int index = (int)(Math.random() * ((upperbound - lowerbound) + 1) + lowerbound);
        int hiddenCube = x.get(index);
        x.remove(index);
        return hiddenCube;
    }

   
    //do we really need classes for this tho? Do we have to use it?
    // x=number list; y=your numbers list; z=your number of chips; a=chip pool for that number
    //have to initialize a=0 before using this method
    //not within this method b/c it will reset if the user inputs an invalid answer
    //maybe we should rename the arraylist parameters so that we know what they are 
    public static void wantNumber(ArrayList<Integer> x, ArrayList<Integer> y, int z, int a) throws IOException{
        System.out.println("Would you like to take the number?");
        String answer = br.readLine();
        if (answer.equalsIgnoreCase("yes")) {
            //get number
            y.add(x.get(0));
            //get the pooled chips
            z= z+a;
        } else if (answer.equalsIgnoreCase("no")) {
            z--;
            a++;
        } else {
            System.out.println("Please enter a valid answer: ");
            wantNumber(x, y, z, a);
        }

    }

    //x being your list of numbers that you have 
    //to be used at the end of the game to count points, not before
    public static int checkConsecutive(ArrayList<Integer> x) {
        int total = 0;
        //wait need to sort the list into numerical order first 
        for (int i = 0; i < x.size()-1; i++) {
            if (x.get(i) == (x.get(i + 1))+1) {    
                for (int k=1; k < x.size()-i; k++){
                    if (x.get(i) == x.get(k)){
                        x.set(k, 0);
                        //dunno if this works 
                    }
                }
                
            }

        }        
        //get total
        for (int a=0; a< x.size(); a++){
            total = total + x.get(a);
        }
        return total;
    }
    
    public static int finalTotal(int total, int chips){
        return total + chips;
        
    }
    
    public static void checkWinner (int total1, int total2, int total3){
        if (total1>total2 && total1>total3){
            //assuming that the player will be set as player #1
            System.out.println("You have won.");
        }
        else if (total2>total1 && total2>total3){
            System.out.println("Player 2 has won.");
        }
        else{
            System.out.println("Player 3 has won.");
        }
    }
    
    public static boolean checkChips (int chips){
        if (chips==0){
            System.out.println("You do not have enough chips to skip this number.");
            return false;
            //then after this it would automatically run the getNumber method
        }
        else{
            return true;
        }
    }
    
    

}
