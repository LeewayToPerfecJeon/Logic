package cpt;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class CPT {

    static ArrayList<Integer> numbers = new ArrayList<>();
    static ArrayList<Player> players = new ArrayList<>();

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) throws IOException {

        int currentNumber;
        int chipPool = 0;
        int trigger = 0;
        
        int x = 0;
        System.out.println("Minus Auction");

        //you; i=0
        createPlayer();
        //AI 1; i=1
        createPlayer();
        //AI 2; i=2
        createPlayer();

        numbers = createNumbers();

        int hiddenCube = pickHiddenCube(numbers);

        currentNumber = getNumber(numbers);
        System.out.println("Number: " + currentNumber);

        //1st turn 
        //so if the player accepts the number
        if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {
            System.out.print((players.get(0)).getMyNumbers());
            System.out.println(", " + (players.get(0)).getChips());

            //new number
            currentNumber = getNumber(numbers);
            System.out.println("Number: " + currentNumber);
            

                    do {
                        if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {

                            System.out.print((players.get(0)).getMyNumbers());
                            System.out.println(", " + (players.get(0)).getChips());
                            trigger = 1;
                            chipPool = 0;
                            x = 0;
                        } else {
                            //chip from the user
                            chipPool++;

                            if (AILogic3(currentNumber) == true) {

                                receiveNumber(1, currentNumber, chipPool);

                                System.out.print("AI #1: " + (players.get(1)).getMyNumbers());
                                System.out.println(", " + (players.get(1)).getChips());
                                trigger = 1;
                                chipPool = 0;
                                x = 1;
                            } else {

                                (players.get(1)).setChips((players.get(1)).getChips() - 1);
                                chipPool++;

                                if (AILogic3(currentNumber) == true) {

                                    receiveNumber(2, currentNumber, chipPool);
                                    x = 2;
                                    trigger = 1;
                                    chipPool = 0;
                                    System.out.print("AI #2: " + (players.get(2)).getMyNumbers());
                                    System.out.println(", " + (players.get(2)).getChips());
                                } else {

                                    (players.get(2)).setChips((players.get(2)).getChips() - 1);
                                    chipPool++;

                                }
                            }
                        }
                    } while (trigger == 0);
                }

            

         //still 1st turn 
        //if the player does not accept the number
        else {
            chipPool++;
            if (AILogic3(currentNumber) == true) {
                receiveNumber(1, currentNumber, chipPool);
                chipPool = 0;
                x = 1;
                System.out.print("AI #1: " + (players.get(1)).getMyNumbers());
                System.out.println(", " + (players.get(1)).getChips());
            } else {

                (players.get(1)).setChips((players.get(1)).getChips() - 1);
                chipPool++;

                if (AILogic3(currentNumber) == true) {
                    receiveNumber(2, currentNumber, chipPool);
                    chipPool = 0;
                    x = 2;
                    System.out.print("AI #2: " + (players.get(2)).getMyNumbers());
                    System.out.println(", " + (players.get(2)).getChips());
                } else {

                    (players.get(2)).setChips((players.get(2)).getChips() - 1);
                    chipPool++;

                    do {
                        if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {

                            System.out.print((players.get(0)).getMyNumbers());
                            System.out.println(", " + (players.get(0)).getChips());
                            trigger = 1;
                            chipPool = 0;
                            x = 0;
                        } else {
                            
                            chipPool++;

                            if (AILogic3(currentNumber) == true) {

                                receiveNumber(1, currentNumber, chipPool);

                                System.out.print("AI #1: " + (players.get(1)).getMyNumbers());
                                System.out.println(", " + (players.get(1)).getChips());
                                trigger = 1;
                                chipPool = 0;
                                x = 1;
                            } else {

                                (players.get(1)).setChips((players.get(1)).getChips() - 1);
                                chipPool++;

                                if (AILogic3(currentNumber) == true) {

                                    receiveNumber(2, currentNumber, chipPool);
                                    x = 2;
                                    trigger = 1;
                                    chipPool = 0;
                                    System.out.print("AI #2: " + (players.get(2)).getMyNumbers());
                                    System.out.println(", " + (players.get(2)).getChips());
                                } else {

                                    (players.get(2)).setChips((players.get(2)).getChips() - 1);
                                    chipPool++;

                                }
                            }
                        }
                    } while (trigger == 0);

                }

            }
        }
        printPlayers(chipPool);
        int trigger3 = 0;
        int trigger4 = 0;
        //
        //
        //OFFICIAL LOOP STARTS HERE
        //
        //
        //I think the loop should generate a new number every time that it loops so only have the new currentNumber be generated
        //at the beginning of the loop 
        do {

            if (trigger3 != 1) {
                if (trigger4 == 1) {
                    

                        trigger4 = 0;
                        if (checkZeroChips((players.get(1)).getChips()) == true) {
                            receiveNumber(1, currentNumber, chipPool);
                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), chipPool) == true) {
                            receiveNumber(1, currentNumber, chipPool);
                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                            receiveNumber(1, currentNumber, chipPool);
                        } else {
                            (players.get(1)).setChips((players.get(1)).getChips() - 1);
                            chipPool++;
                            x = 2;
                            if (checkZeroChips((players.get(2)).getChips()) == true) {
                                receiveNumber(2, currentNumber, chipPool);
                            } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
                                receiveNumber(2, currentNumber, chipPool);
                            } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                receiveNumber(2, currentNumber, chipPool);
                            } else {
                                (players.get(2)).setChips((players.get(2)).getChips() - 1);
                                chipPool++;
                                x = 0;
                                do {
                                    System.out.println("Current number: " + currentNumber);
                                    trigger4 = 0;
                                    if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {

                                        System.out.print((players.get(0)).getMyNumbers());
                                        System.out.println(", " + (players.get(0)).getChips());
                                        trigger = 1;
                                        chipPool = 0;
                                        trigger4 = 1;
                                    } else {

                                        chipPool++;
                                        x = 1;

                                        if (checkZeroChips((players.get(1)).getChips()) == true) {
                                            receiveNumber(1, currentNumber, chipPool);
                                            trigger = 1;
                                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), chipPool) == true) {
                                            receiveNumber(1, currentNumber, chipPool);
                                            trigger = 1;
                                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                            receiveNumber(1, currentNumber, chipPool);
                                            trigger = 1;
                                        } else {
                                            (players.get(1)).setChips((players.get(1)).getChips() - 1);
                                            chipPool++;
                                            x = 2;
                                            if (checkZeroChips((players.get(2)).getChips()) == true) {
                                                receiveNumber(2, currentNumber, chipPool);
                                                trigger = 1;
                                            } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
                                                receiveNumber(2, currentNumber, chipPool);
                                                trigger = 1;
                                            } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                                receiveNumber(2, currentNumber, chipPool);
                                                trigger = 1;
                                            } else {

                                                (players.get(2)).setChips((players.get(2)).getChips() - 1);
                                                chipPool++;
                                                x = 0;
                                            }
                                        }
                                    }
                                } while (trigger == 0);
                            }
                        }

//                    } else if (x == 2) {
//                        trigger4 = 0;
//                        if (checkZeroChips((players.get(2)).getChips()) == true) {
//                            receiveNumber(2, currentNumber, chipPool);
//                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
//                            receiveNumber(2, currentNumber, chipPool);
//                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
//                            receiveNumber(2, currentNumber, chipPool);
//                        } else {
//
//                            (players.get(2)).setChips((players.get(2)).getChips() - 1);
//                            chipPool++;
//                            x = 0;
//                            do {
//                                System.out.println("Current number: " + currentNumber);
//                                if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {
//
//                                    System.out.print((players.get(0)).getMyNumbers());
//                                    System.out.println(", " + (players.get(0)).getChips());
//                                    trigger = 1;
//                                    chipPool = 0;
//                                    trigger4 = 1;
//                                } else {
//
//                                    chipPool++;
//                                    x = 1;
//
//                                    if (checkZeroChips((players.get(1)).getChips()) == true) {
//                                        receiveNumber(1, currentNumber, chipPool);
//                                        trigger = 1;
//                                    } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), chipPool) == true) {
//                                        receiveNumber(1, currentNumber, chipPool);
//                                        trigger = 1;
//                                    } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
//                                        receiveNumber(1, currentNumber, chipPool);
//                                        trigger = 1;
//                                    } else {
//                                        (players.get(1)).setChips((players.get(1)).getChips() - 1);
//                                        chipPool++;
//                                        x = 2;
//                                        if (checkZeroChips((players.get(2)).getChips()) == true) {
//                                            receiveNumber(2, currentNumber, chipPool);
//                                            trigger = 1;
//                                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
//                                            receiveNumber(2, currentNumber, chipPool);
//                                            trigger = 1;
//                                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
//                                            receiveNumber(2, currentNumber, chipPool);
//                                            trigger = 1;
//                                        } else {
//
//                                            (players.get(2)).setChips((players.get(2)).getChips() - 1);
//                                            chipPool++;
//                                            x = 0;
//                                        }
//                                    }
//                                }
//                            } while (trigger == 0);
//                        }
//                    }

                    //above this is all repeated 
                }else {
                    trigger4 = 0;
                    chipPool = 0;
                    currentNumber = getNumber(numbers);
                    System.out.println("Number: " + currentNumber);
                    if (x == 0) {
                        if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {
                            System.out.print((players.get(0)).getMyNumbers());
                            System.out.println(", " + (players.get(0)).getChips());

                        } else {
                            x = 1;
                            chipPool++;
                            trigger4 = 1;
                        }

                    } else if (x == 1) {

                        if (checkZeroChips((players.get(1)).getChips()) == true) {
                            receiveNumber(1, currentNumber, chipPool);
                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), chipPool) == true) {
                            receiveNumber(1, currentNumber, chipPool);
                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                            receiveNumber(1, currentNumber, chipPool);
                        } else {
                            (players.get(1)).setChips((players.get(1)).getChips() - 1);
                            chipPool++;
                            x = 2;
                            if (checkZeroChips((players.get(2)).getChips()) == true) {
                                receiveNumber(2, currentNumber, chipPool);
                            } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
                                receiveNumber(2, currentNumber, chipPool);
                            } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                receiveNumber(2, currentNumber, chipPool);
                            } else {
                                (players.get(2)).setChips((players.get(2)).getChips() - 1);
                                chipPool++;
                                x = 0;
                                do {
                                    if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {

                                        System.out.print((players.get(0)).getMyNumbers());
                                        System.out.println(", " + (players.get(0)).getChips());
                                        trigger = 1;
                                        chipPool = 0;
                                        trigger4 = 1;
                                    } else {

                                        chipPool++;
                                        x = 1;

                                        if (checkZeroChips((players.get(1)).getChips()) == true) {
                                            receiveNumber(1, currentNumber, chipPool);
                                            trigger = 1;
                                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), chipPool) == true) {
                                            receiveNumber(1, currentNumber, chipPool);
                                            trigger = 1;
                                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                            receiveNumber(1, currentNumber, chipPool);
                                            trigger = 1;
                                        } else {
                                            (players.get(1)).setChips((players.get(1)).getChips() - 1);
                                            chipPool++;
                                            x = 2;
                                            if (checkZeroChips((players.get(2)).getChips()) == true) {
                                                receiveNumber(2, currentNumber, chipPool);
                                                trigger = 1;
                                            } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
                                                receiveNumber(2, currentNumber, chipPool);
                                                trigger = 1;
                                            } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                                receiveNumber(2, currentNumber, chipPool);
                                                trigger = 1;
                                            } else {

                                                (players.get(2)).setChips((players.get(2)).getChips() - 1);
                                                chipPool++;
                                                x = 0;
                                            }
                                        }
                                    }
                                } while (trigger == 0);
                            }
                        }

                    } else if (x == 2) {

                        if (checkZeroChips((players.get(2)).getChips()) == true) {
                            receiveNumber(2, currentNumber, chipPool);
                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
                            receiveNumber(2, currentNumber, chipPool);
                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                            receiveNumber(2, currentNumber, chipPool);
                        } else {

                            (players.get(2)).setChips((players.get(2)).getChips() - 1);
                            chipPool++;
                            x = 0;
                            do {
                                if (wantNumber(currentNumber, (players.get(0)).getMyNumbers(), (players.get(0).getChips()), chipPool) == true) {

                                    System.out.print((players.get(0)).getMyNumbers());
                                    System.out.println(", " + (players.get(0)).getChips());
                                    trigger = 1;
                                    chipPool = 0;
                                } else {

                                    chipPool++;
                                    x = 1;

                                    if (checkZeroChips((players.get(1)).getChips()) == true) {
                                        receiveNumber(1, currentNumber, chipPool);
                                        trigger = 1;
                                    } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), chipPool) == true) {
                                        receiveNumber(1, currentNumber, chipPool);
                                        trigger = 1;
                                    } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(2)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                        receiveNumber(1, currentNumber, chipPool);
                                        trigger = 1;
                                    } else {
                                        (players.get(1)).setChips((players.get(1)).getChips() - 1);
                                        chipPool++;
                                        x = 2;
                                        if (checkZeroChips((players.get(2)).getChips()) == true) {
                                            receiveNumber(2, currentNumber, chipPool);
                                            trigger = 1;
                                        } else if (AILogic1((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers()) == true && AILogic4((players.get(x)).getMyNumbers(), currentNumber, (players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), chipPool) == true) {
                                            receiveNumber(2, currentNumber, chipPool);
                                            trigger = 1;
                                        } else if (AILogic5((players.get(0)).getMyNumbers(), (players.get(1)).getMyNumbers(), currentNumber) == true || AILogic2(chipPool, currentNumber) == true) {
                                            receiveNumber(2, currentNumber, chipPool);
                                            trigger = 1;
                                        } else {

                                            (players.get(2)).setChips((players.get(2)).getChips() - 1);
                                            chipPool++;
                                            x = 0;
                                        }
                                    }
                                }
                            } while (trigger == 0);
                        }
                    }

                

            }
            printPlayers(chipPool);

            if (numbers.size() == 0) {
                trigger3 = 1;
          
            }}
        } while (trigger3 == 0);

        int semiTotal1 = finalCheckConsecutive((players.get(0)).getMyNumbers());
        int total1 = finalTotal(semiTotal1, (players.get(0)).getChips());

        int semiTotal2 = finalCheckConsecutive((players.get(1)).getMyNumbers());
        int total2 = finalTotal(semiTotal2, (players.get(1)).getChips());

        int semiTotal3 = finalCheckConsecutive((players.get(2)).getMyNumbers());
        int total3 = finalTotal(semiTotal3, (players.get(2)).getChips());

        checkWinner(total1, total2, total3);
    }
        

    public static void printPlayers(int chipPool) {
        for (int i = 0; i < players.size(); i++) {
            System.out.println(players.get(i));
        }
        System.out.println("Number of chips in the chip pool: " + chipPool);
    }

    public static void createPlayer() {
        int chips = 7;
        ArrayList<Integer> myNumbers = new ArrayList<>();

        players.add(new Player(chips, myNumbers));

    }

    public static boolean checkZeroChips(int chips) {
        if (chips <= 0) {
            return true;
        } else {
            return false;
        }
    }

    //AI methods
    public static boolean AILogic1(ArrayList<Integer> x, int y, ArrayList<Integer> player1, ArrayList<Integer> player2) {
        //true = take; false = pass        
        //x being my arraylist of numbers
        //y being the number that's picked for that round

        //for loop to check whether to let the number go around once to collect chips 
        for (int i = 0; i < x.size(); i++) {
            //first check if they're 1 away from mine
            if ((x.get(i)) == (y + 1) || x.get(i) == (y - 1)) {
                //then check if other people need it + number of chips in the pool
                for (int j = 0; j < player1.size(); j++) {
                    //so if the number is NOT 1 or 2 up from any number the other players have, 
                    //pass the number so that you can collect more chips 
                    //QUESTION: does it matter if the number is small and other people take it? 
                    if ((x.get(j)) != (y + 1) || x.get(j) != (y - 1) || x.get(j) != (y - 2) || x.get(j) != (y + 2)) {
                        for (int k = 0; k < player2.size(); k++) {
                            if ((x.get(k)) != (y + 1) || x.get(k) != (y - 1) || x.get(k) != (y - 2) || x.get(k) != (y + 2)) {
                                return false;
                            }
                        }
                    }
                }

            }

        }

        return true;

    }

    public static boolean AILogic4(ArrayList<Integer> x, int y, ArrayList<Integer> player1, ArrayList<Integer> player2, int chips) {
        //check if the number is related to other players so that you can ruin their lives
        //y = current number

        for (int i = 0; i < player1.size(); i++) {
            if (player1.get(i) == (y - 1) || player1.get(i) == (y + 1) || player1.get(i) == (y - 2) || player1.get(i) == (y + 2)) {
                if ((y + chips) > -3) {
                    for (int m = 0; m < player2.size(); m++) {
                        if (player2.get(m) != (y - 1) || player2.get(m) == (y + 1) || player2.get(m) == (y - 2) || player2.get(m) == (y + 2)) {
                            return true;
                        }
                    }

                }
            }
        }
        for (int j = 0; j < player2.size(); j++) {
            if (player2.get(j) == (y - 1) || player2.get(j) == (y + 1) || player2.get(j) == (y - 2) || player2.get(j) == (y + 2)) {
                if ((y + chips) > -3) {

                    for (int m = 0; m < player1.size(); m++) {
                        if (player1.get(m) != (y - 1) || player1.get(m) == (y + 1) || player1.get(m) == (y - 2) || player1.get(m) == (y + 2)) {
                            return true;
                        }
                    }

                }
            }
        }

        return false;
    }

    //if they are missing the middle number 
    //x = current number
    public static boolean AILogic5(ArrayList<Integer> player1, ArrayList<Integer> player2, int x) {
        for (int i = 0; i < player1.size() - 2; i++) {
            for (int j = 0; j < player1.size(); j++) {
                if ((i + 2 != j) && (player1.get(i) + 2) == (player1.get(j))) {
                    if (player2.get(i) != (x + 1) && (player2.get(i) >= 0)) {
                        if (x == (player1.get(i) + 1)) {
                            return true;
                        }
                    }
                }
            }

        }
        for (int i = 0; i < player2.size() - 2; i++) {
            for (int j = 0; j < player2.size(); j++) {
                if ((i + 2 != j) && (player2.get(i) + 2) == (player2.get(j))) {
                    if (player1.get(i) != (x + 1)) {
                        if (x == (player2.get(i) + 1)) {
                            return true;
                        }
                    }
                }
            }

        }
        return false;
    }

    //x= # of chips in the pool
    //y = the # for that round
    public static boolean AILogic2(int x, int y) {
        if (x + y >= 0) {
            return true;
        }

        return false;
    }

    //only for the FIRST TURN, to decide whether to take the number or not
    public static boolean AILogic3(int x) {
        if (x > -11) {
            return true;
        } else {
            return false;
        }
    }

    //game methods starting from here 
    public static <Integer> ArrayList createNumbers() {

        for (int i = -1; i > -21; i--) {
            numbers.add(i);
        }
        return numbers;
    }

    //only need this method for the player b/c it's already initialized for the AI
    public static int initializeChips() {
        //we can always change this number
        return 7;

    }

    public static int getNumber(ArrayList<Integer> x) {
        int upperbound = (x.size() - 1);
        int lowerbound = 0;
        int index = (int) (Math.random() * ((upperbound - lowerbound) + 1) + lowerbound);
        int number = x.get(index);
        //remove removes the number and the numbers after that all move one spot to the left right
        x.remove(index);
        return number;

    }

    public static int pickHiddenCube(ArrayList<Integer> x) {
        int upperbound = (x.size() - 1);
        int lowerbound = 0;
        int index = (int) (Math.random() * ((upperbound - lowerbound) + 1) + lowerbound);
        int hiddenCube = x.get(index);
        x.remove(index);
        return hiddenCube;
    }

    // x=number list; y=your numbers list; z=your number of chips; a=chip pool for that number
    //have to initialize a=0 before using this method
    public static boolean wantNumber(int x, ArrayList<Integer> y, int z, int a) throws IOException {
        if (z == 0) {
            System.out.println("You do not have enough chips to pass the number.");
            System.out.println("You will automatically accept the number.");
            return true;
        } else {
            System.out.println("Would you like to take the number?");
            String answer = br.readLine();
            if (answer.equalsIgnoreCase("yes")) {
                //get number
                y.add(x);
                //get the pooled chips
                (players.get(0)).setChips((players.get(0)).getChips() + a);
                return true;
            } else {
                (players.get(0)).setChips((players.get(0)).getChips() - 1);

                return false;
            }
        }

    }

    //for AI only
    //x = AI number
    //y = current number
    //z = # of chips in the pool
    public static void receiveNumber(int x, int y, int z) {

        ((players.get(x)).getMyNumbers()).add(y);
        (players.get(x)).setChips((players.get(x)).getChips() + z);

    }

    //x being your list of numbers that you have 
    //to be used at the end of the game to count points, not before
    public static int finalCheckConsecutive(ArrayList<Integer> x) {

        int total = 0;
        Collections.sort(x);
        //wait need to sort the list into numerical order first 
        for (int i = 0; i < x.size() - 1; i++) {
            if (x.get(i) == (x.get(i + 1)) + 1) {
                for (int k = 1; k < x.size() - i; k++) {
                    if (x.get(i) == x.get(k)) {
                        x.set(k, 0);
                        //dunno if this works 
                    }
                }

            }

        }
        //get total
        for (int a = 0; a < x.size(); a++) {
            total = total + x.get(a);
        }
        return total;
    }

    public static int finalTotal(int total, int chips) {
        return total + chips;

    }

    public static void checkWinner(int total1, int total2, int total3) {
        if (total1 > total2 && total1 > total3) {
            //assuming that the player will be set as player #1
            System.out.println("Congratulations! You have won.");
        } else if (total2 > total1 && total2 > total3) {
            System.out.println("Player 1 has won.");
            System.out.println("The death match is loading...");
        } else {
            System.out.println("Player 2 has won.");
            System.out.println("The death match is loading...");
        }
    }

}
